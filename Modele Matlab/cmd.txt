// linearyzuje model
>> linearizemodel

// porownanie obiektu i modelu
>> parameters_tune

// wynik linearyzacji
>> linsys1

linsys1 =
// macierze a,b,c,d
  a = 
                 Integrator  Integrator1  Integrator2
   Integrator        -39.45         8.04   -4.123e-10
   Integrator1       -15.39            0         1718
   Integrator2            0            1            0

>> linsys1.a

ans =

   1.0e+03 *

   -0.0395    0.0080   -0.0000
   -0.0154         0    1.7178
         0    0.0010         0

// pokazuje macierze ABCD systemu i zapisuje do zmiennych od razu
>> [A,B,C,D] = ssdata(linsys1)

A =

   1.0e+03 *

   -0.0395    0.0080   -0.0000
   -0.0154         0    1.7178
         0    0.0010         0
...

/* 
    Przestawia kolejności w macierzach - na podstawie ułożenia macierzy C
    macierz C jest zmieniona w jednostkową, reszta przetransformowana -
    dzięki temu są wg tego jak są po kolei zmienne stanu
*/
>> linsys2 = ss2ss(linsys1,linsys1.C)

linsys2 =
 
  a = 
               x1          x2          x3
   x1           0           1           0
   x2        1718           0      -15.39
   x3  -4.123e-10        8.04      -39.45
 
  b = 
           u
   x1      0
   x2      0
   x3  110.6
 
  c = 
       x1  x2  x3
   z    1   0   0
   z'   0   1   0
   q'   0   0   1
 
  d = 
       u
   z   0
   z'  0
   q'  0

// wartości własne - niestabilne, bo jest dodatnia
>> eig(linsys2)

ans =

  40.6821 + 0.0000i
 -40.0685 + 7.7802i
 -40.0685 - 7.7802i

// macierz sterowalności
>> ctrb(linsys2)

ans =

   1.0e+05 *

         0         0   -0.0170
         0   -0.0170    0.6716
    0.0011   -0.0436    1.5851

// rząd macierzy
>> rank(ans)

ans =

     3

// macierz sterowalności systemu bez przestawienia - jest obrócona, nie ma 
// znaczenia
>> [B,A*B,A^2*B]

ans =

   1.0e+05 *

    0.0011   -0.0436    1.5851
         0   -0.0170    0.6716
         0         0   -0.0170

// żeby mieć dobrą kolejność, bierzemy macierze z przestawionego systemu
>> [A,B,C,D] = ssdata(linsys2)

// Q jednostkowa (eye), R = 1
>> K = lqr(A,B,Q,R)

K =

 -320.6262   -7.7278    1.4536

// Punkt pracy - wyliczony w linearizemodel
>> op_trim1

 Operating Report for the Model plant_model_for_linearization.
 (Time-Varying Components Evaluated at time t=0)

Operating point specifications were successfully met.
States: 
----------
(1.) plant_model_for_linearization/Integrator
      x:          1.28      dx:     -6.54e-11 (0)
(2.) plant_model_for_linearization/Integrator1
      x:             0      dx:     -7.32e-08 (0)
(3.) plant_model_for_linearization/Integrator2
      x:          0.01      dx:             0 (0)

Inputs: 
----------
(1.) plant_model_for_linearization/u
      u:         0.455    [0 Inf]

Outputs: 
----------
(1.) plant_model_for_linearization/z
      y:          0.01    [-Inf Inf]
(2.) plant_model_for_linearization/z'
      y:             0    [-Inf Inf]
(3.) plant_model_for_linearization/q'
      y:          1.28    [-Inf Inf]
 
>> op_trim1.States(1)
(1.) plant_model_for_linearization/Integrator
      x:          1.28      dx:     -6.54e-11 (0)

// natężenie w punkcie pracy
>> i_ep = op_trim1.States(1).x

i_ep =

    1.2750

// wejście w punkcie pracy
>> u_ep = op_trim1.Inputs(1).u

u_ep =

    0.4548

// Q zmienione - żeby większy wpływ mieć na zmienne stanu odpowiednie
// prąd i pozycja - CZEMU TAK? POZYCJA NAJWAZNIEJSZA?
>> Q = diag([100,10,1])

Q =

   100     0     0
     0    10     0
     0     0     1

>> K = lqr(A,B,Q,R)

K =

 -326.9129   -8.4220    1.5062

// R większe - bardziej zwiększa koszt używania wejścia w funkcji celu
>> R = 10

R =

    10

>> K = lqr(A,B,Q,R)

K =

 -190.8497   -4.6393    0.8754

// Żeby kulka miała gdzie spaść choć trochę
>> z_max = 0.020

z_max =

    0.0200

>> R = 1

R =

     1

>> K = lqr(A,B,Q,R)

K =

 -326.9129   -8.4220    1.5062

>> z0 = 0.005

z0 =

    0.0050